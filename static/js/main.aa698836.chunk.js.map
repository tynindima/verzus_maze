{"version":3,"sources":["img/start2.png","components/Directions/Directions.tsx","store/actionCreators.ts","store/types.ts","components/Maze/Maze.tsx","components/Game/Game.tsx","store/store.ts","components/Modal/Modal.tsx","App.tsx","index.tsx"],"names":["module","exports","Directions","props","fieldOfArrows","className","map","item","name","key","id","toggleStart","isStart","type","toggleFinish","isFinish","getStart","start","getFinish","finish","toggleContinueGame","isContinueGame","getAnswer","answer","getFieldOfArrows","arrows","toggleClick","isClick","maze","mapDispatchToProps","selectFinish","onAnswer","onContinueGame","connect","state","handleSelect","event","currentTarget","join","setTimeout","_","y","x","onClick","cx","src","startImg","alt","getRandomNumber","min","max","number","Math","random","round","selectStart","onStart","onFinish","onFieldOfArrows","selectClick","currentPosition","directions","1","2","3","4","directionsArray","length","arrow","push","uuidv4","disabled","initialState","store","createStore","action","onContinue","ReactDOM","createPortal","document","getElementById","render"],"mappings":"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","file":"static/js/main.aa698836.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/start2.5b856668.png\";","import React, { FC } from 'react';\nimport './styles/directions.scss';\n\ninterface Props {\n  fieldOfArrows: Arrow[];\n}\n\nexport const Directions: FC<Props> = (props) => {\n  const { fieldOfArrows } = props;\n\n  return (\n    <div className=\"directions\">\n        {fieldOfArrows.map((item: Arrow) => (\n          <div\n            className={`directions__step directions__step--${item.name}`}\n            key={item.id}\n          />\n        ))}\n      </div>\n  );\n};\n","import {\n  SET_IS_START,\n  SET_IS_FINISH,\n  SET_START,\n  SET_FINISH,\n  SET_IS_CONTINUE_GAME,\n  SET_ANSWER,\n  SET_FIELD_OF_ARROWS,\n  SET_IS_CLICK,\n} from './types';\n\nexport const toggleStart = (isStart: boolean) => ({type: SET_IS_START, isStart});\nexport const toggleFinish = (isFinish: boolean) => ({type: SET_IS_FINISH, isFinish});\nexport const getStart = (start: Array<number>) => ({type: SET_START, start});\nexport const getFinish = (finish: Array<number>) => ({type: SET_FINISH, finish});\nexport const toggleContinueGame = (isContinueGame: boolean) => ({type: SET_IS_CONTINUE_GAME, isContinueGame});\nexport const getAnswer = (answer: string) => ({type: SET_ANSWER, answer});\nexport const getFieldOfArrows = (arrows: Arrow[]) => ({type: SET_FIELD_OF_ARROWS, arrows});\nexport const toggleClick = (isClick: boolean) => ({type: SET_IS_CLICK, isClick});\n","export const SET_IS_START = 'SET_IS_START';\nexport const SET_IS_FINISH = 'SET_IS_FINISH';\nexport const SET_START = 'SET_START';\nexport const SET_FINISH = 'SET_FINISH';\nexport const SET_IS_CONTINUE_GAME = 'SET_IS_CONTINUE_GAME';\nexport const SET_ANSWER = 'SET_ANSWER';\nexport const SET_FIELD_OF_ARROWS = 'SET_FIELD_OF_ARROWS';\nexport const SET_IS_CLICK = 'SET_IS_CKLICK';\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport cx from 'classnames';\nimport './styles/maze.scss'\n\nimport startImg from '../../img/start2.png';\nimport { State } from '../../store/store';\nimport { toggleFinish, getAnswer, toggleContinueGame } from '../../store/actionCreators';\n\nconst maze = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n\ninterface Props {\n  finish: Array<number>;\n  start: Array<number>;\n  isFinish: boolean;\n  isStart: boolean;\n  answer: string;\n  selectFinish: (isFinish: boolean) => void;\n  onAnswer: (answer: string) => void;\n  onContinueGame: (isCountinue: boolean) => void;\n};\n\nconst Maze: FC<Props> = (props) => {\n\n  const {\n    finish,\n    start,\n    isFinish,\n    isStart,\n    answer,\n    selectFinish,\n    onAnswer,\n    onContinueGame,\n  } = props;\n\n  const handleSelect = (event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>) => {\n    const { id } = event.currentTarget;\n    if (isStart && !isFinish) {\n      onAnswer(id);\n\n      if (id === finish.join('')) {\n        selectFinish(true);\n      } else {\n        setTimeout(() => {\n          selectFinish(true);\n        }, 300);\n      }\n\n      setTimeout(() => {\n        onContinueGame(true);\n      }, 1500);\n    }\n  };\n\n  return (\n    <table className=\"maze\">\n        <tbody>\n        {maze.map((_, y) => (\n          <tr key={y} className=\"maze__row\">\n            {maze[y].map((_, x) => (\n            <td\n              onClick={handleSelect}\n              className={cx(\"maze__digit\",\n              {\"maze__digit--success\": isFinish && finish.join('') === `${y}${x}`},\n              {\"maze__digit--fail\": finish.join('') !== `${y}${x}` && answer === `${y}${x}`}\n\n              )}\n              key={x}\n              id={`${y}${x}`}\n            >\n              {start.join('') === `${y}${x}`\n                ? <img className=\"maze__img\" src={startImg} alt=\"start\"/>\n                : null}\n            </td>\n            ))}\n          </tr>\n        ))}\n        </tbody>\n      </table>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  start: state.start,\n  finish: state.finish,\n  isFinish: state.isFinish,\n  isStart: state.isStart,\n  answer: state.answer,\n});\n\nconst mapDispatchToProps = {\n  selectFinish: toggleFinish,\n  onAnswer: getAnswer,\n  onContinueGame: toggleContinueGame,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Maze);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport './styles/game.scss';\nimport cx from 'classnames';\n\nimport { Directions } from '../Directions';\nimport Maze from '../Maze/Maze';\nimport { State } from '../../store/store';\nimport {\n  toggleStart,\n  toggleFinish,\n  getStart,\n  getFinish,\n  getFieldOfArrows,\n  toggleClick\n} from '../../store/actionCreators';\n\nexport const getRandomNumber = (min: number, max: number): number => {\n  const number = min + Math.random() * (max - min);\n\n  return Math.round(number);\n};\n\ninterface Props {\n  isClick: boolean;\n  selectStart: (isStart: boolean) => void;\n  selectFinish: (isFinish: boolean) => void;\n  selectClick: (isClick: boolean) => void;\n  onStart: (start: Array<number>) => void;\n  onFinish: (finish: Array<number>) => void;\n  onFieldOfArrows: (arrpws: Arrow[]) => void;\n  fieldOfArrows: Arrow[];\n  start: Array<number>;\n}\n\nconst Game: FC<Props> = (props) => {\n  const {\n    isClick,\n    selectStart,\n    selectFinish,\n    selectClick,\n    onFinish,\n    onFieldOfArrows,\n    fieldOfArrows,\n    start,\n  } = props;\n\n  const currentPosition = [...start];\n\n  const directions: {[key: string]: string} = {\n    1: \"up\",\n    2: \"down\",\n    3: \"left\",\n    4: \"right\"\n  };\n\n  const handleStart = () => {\n    const directionsArray = [];\n\n    while (directionsArray.length < 10) {\n      const arrow = getRandomNumber(1, 4);\n\n\n      switch (directions[arrow]) {\n        case \"up\":\n          if ((currentPosition[0]) > 0) {\n            currentPosition[0] -= 1;\n            directionsArray.push({\n              id: uuidv4(),\n              name: directions[arrow],\n            });\n          }\n          break;\n\n        case \"down\":\n          if ((currentPosition[0]) < 2) {\n            currentPosition[0] += 1;\n            directionsArray.push({\n              id: uuidv4(),\n              name: directions[arrow],\n            });\n          }\n          break;\n        case \"left\":\n          if ((currentPosition[1]) > 0) {\n            currentPosition[1] -= 1;\n            directionsArray.push({\n              id: uuidv4(),\n              name: directions[arrow],\n            });\n          }\n          break;\n\n        case \"right\":\n          if ((currentPosition[1]) < 2) {\n            currentPosition[1] += 1;\n            directionsArray.push({\n              id: uuidv4(),\n              name: directions[arrow],\n            });\n          }\n          break;\n          default:\n            break;\n      }\n\n    }\n\n    onFieldOfArrows(directionsArray);\n    onFinish(currentPosition);\n    selectStart(true);\n    selectFinish(false);\n    selectClick(true);\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"game__container\">\n        <button\n          className={cx(\"game__button\", {\"game__button--passive\": isClick})}\n          type=\"button\"\n          onClick={handleStart}\n          disabled={isClick}\n        >\n          Start\n        </button>\n\n        <Maze />\n      </div>\n      <Directions fieldOfArrows={fieldOfArrows} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  start: state.start,\n  fieldOfArrows: state.fieldOfArrows,\n  isClick: state.isClick,\n});\n\nconst mapDispatchToProps = {\n  selectStart: toggleStart,\n  selectFinish: toggleFinish,\n  onStart: getStart,\n  onFinish: getFinish,\n  onFieldOfArrows: getFieldOfArrows,\n  selectClick: toggleClick,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import { createStore, AnyAction } from 'redux';\nimport {\n  SET_IS_FINISH,\n  SET_IS_START,\n  SET_START,\n  SET_FINISH,\n  SET_IS_CONTINUE_GAME,\n  SET_ANSWER,\n  SET_FIELD_OF_ARROWS,\n  SET_IS_CLICK,\n} from './types';\nimport { getRandomNumber } from '../components/Game';\n\nexport interface State {\n  start: Array<number>;\n  finish: Array<number>;\n  answer: string;\n  fieldOfArrows: Arrow[];\n  isStart: boolean;\n  isFinish: boolean;\n  isContinueGame: boolean;\n  isClick: boolean;\n};\n\nconst initialState = {\n  start: [getRandomNumber(0, 2), getRandomNumber(0,2)],\n  finish: [],\n  answer: \"\",\n  fieldOfArrows: [],\n  isStart: false,\n  isFinish: false,\n  isContinueGame: false,\n  isClick: false,\n};\n\nconst reducer = (state: State = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_IS_START:\n      return {\n        ...state,\n        isStart: action.isStart,\n      };\n    case SET_IS_FINISH:\n      return {\n        ...state,\n        isFinish: action.isFinish,\n      };\n    case SET_START:\n      return {\n        ...state,\n        start: action.start,\n      };\n    case SET_FINISH:\n      return {\n        ...state,\n        finish: action.finish,\n      };\n    case SET_IS_CONTINUE_GAME:\n      return {\n        ...state,\n        isContinueGame: action.isContinueGame,\n      };\n    case SET_ANSWER:\n      return {\n        ...state,\n        answer: action.answer,\n      };\n      case SET_FIELD_OF_ARROWS:\n        return {\n          ...state,\n          fieldOfArrows: action.arrows,\n        };\n      case SET_IS_CLICK:\n        return {\n          ...state,\n          isClick: action.isClick,\n        };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default store;\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\n\nimport './styles/modal.scss';\nimport { State } from '../../store/store';\nimport { getRandomNumber } from '../Game';\nimport {\n  toggleContinueGame,\n  getAnswer,\n  toggleFinish,\n  getFieldOfArrows,\n  getStart,\n  toggleStart,\n  getFinish,\n  toggleClick\n} from '../../store/actionCreators';\n\ninterface Props {\n  finish: Array<number>;\n  answer: string;\n  onContinue: (c: boolean) => void;\n  onAnswer: (answer: string) => void;\n  selectFinish: (isFinish: boolean) => void;\n  onFieldOfArrows: (arrpws: Arrow[]) => void;\n  onStart: (start: Array<number>) => void;\n  onFinish: (finish: Array<number>) => void;\n  selectStart: (isStart: boolean) => void;\n  selectClick: (isClick: boolean) => void;\n}\n\nconst Modal: FC<Props> = (props) => {\n  const {\n    onContinue,\n    onAnswer,\n    selectFinish,\n    selectClick,\n    onFieldOfArrows,\n    onStart,\n    onFinish,\n    selectStart,\n    finish,\n    answer,\n  } = props;\n\n  const handleCoutinue = () => {\n    onAnswer('');\n    onFieldOfArrows([]);\n    onStart([getRandomNumber(0, 2), getRandomNumber(0, 2)]);\n    onFinish([]);\n\n    selectStart(false);\n    onContinue(false);\n    selectFinish(false);\n    selectClick(false);\n  };\n\n  const handleClose = () => {\n    onContinue(false);\n    selectStart(false);\n  };\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modal__window\">\n      {finish.join('') === answer\n        ? <h3 className=\"modal__status\">Winner!</h3>\n        : <h3 className=\"modal__status\">Loser!</h3>\n      }\n        <p className=\"modal__text\">Do you want to contimnue?</p>\n        <div className=\"modal__container\">\n          <button\n            className=\"modal__button modal__button--continue\"\n            type=\"button\"\n            onClick={handleCoutinue}\n          >\n            Contunue\n          </button>\n          <button\n            className=\"modal__button modal__button--close\"\n            type=\"button\"\n            onClick={handleClose}\n          >\n            Close\n          </button>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  finish: state.finish,\n  answer: state.answer,\n});\n\nconst mapDispatchToProps = {\n  onContinue: toggleContinueGame,\n  onAnswer: getAnswer,\n  selectFinish: toggleFinish,\n  selectStart: toggleStart,\n  selectClick: toggleClick,\n  onFieldOfArrows: getFieldOfArrows,\n  onStart: getStart,\n  onFinish: getFinish,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n","import React, { FC } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport Game from './components/Game/Game';\n\nimport './App.scss';\nimport { State } from './store/store';\nimport Modal from './components/Modal/Modal';\n\ninterface Props {\n  isContinueGame: boolean;\n};\n\nconst App: FC<Props> = (props) => {\n\n  const {isContinueGame} = props;\n\n  return (\n    <div className=\"App\">\n      {isContinueGame\n      && ReactDOM.createPortal(\n        <Modal />,\n        document.getElementById('portal') as HTMLElement,\n      )}\n      <Game />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  isContinueGame: state.isContinueGame,\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n );\n"],"sourceRoot":""}